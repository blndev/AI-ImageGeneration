from typing import Tuple
from PIL import Image
from PIL.ExifTags import TAGS

class ExifScanner:

    # Common AI image generator software identifiers
    AI_GENERATOR_SIGNATURES = {
        'dalle', 'midjourney', 'stable diffusion', 'deepai',
        'neural', 'gan', 'artificial', 'synthesized', 'generated'
    }

    # Common AI generator image sizes (width, height)
    AI_COMMON_SIZES = {
        # Stable Diffusion default sizes
        (512, 512),    # SD default square
        (768, 768),    # SD higher quality square
        (1024, 1024),  # SD high quality square
        (512, 768),    # SD default portrait
        (768, 512),    # SD default landscape
        (704, 704),    # SD alternative square
        (648, 648),    # SD alternative square
        
        # Midjourney common sizes
        (1024, 1024),  # Default square
        (1664, 1024),  # Wide
        (1024, 1664),  # Tall
        (1456, 1456),  # Alternative square
        
        # DALL-E sizes
        (256, 256),    # DALL-E mini
        (512, 512),    # DALL-E 2 default
        (1024, 1024),  # DALL-E 2 high quality
        
        # Other common AI sizes
        (640, 640),
        (896, 896),
        (1280, 1280),
        (1536, 1536),
        (2048, 2048),  # High-end generations
        
        # Common aspect ratio variants
        (512, 1024),   # 1:2 portrait
        (1024, 512),   # 2:1 landscape
        (768, 1024),   # 3:4 portrait
        (1024, 768),   # 4:3 landscape
    }

    # Size tolerance for comparison (pixels)
    SIZE_TOLERANCE = 4

    def is_common_ai_size(self, width: int, height: int, tolerance: int = None) -> Tuple[bool, str]:
        """
        Check if image dimensions match common AI generator output sizes
        
        Args:
            width: Image width in pixels
            height: Image height in pixels
            tolerance: Pixel tolerance for size comparison (default: self.SIZE_TOLERANCE)
            
        Returns:
            Tuple[bool, str]: (is_ai_size, reason)
        """
        if tolerance is None:
            tolerance = self.SIZE_TOLERANCE

        # Check exact matches first
        if (width, height) in self.AI_COMMON_SIZES:
            return True, f"Exact match for AI generation size: {width}x{height}"

        # Check with tolerance
        for ai_width, ai_height in self.AI_COMMON_SIZES:
            if (abs(width - ai_width) <= tolerance and 
                abs(height - ai_height) <= tolerance):
                return True, f"Close match to AI generation size: {ai_width}x{ai_height} (within {tolerance}px)"

        # Check common multiples (0.5x, 2x, 4x)
        multipliers = [0.5, 2, 4]
        for ai_width, ai_height in self.AI_COMMON_SIZES:
            for multiplier in multipliers:
                scaled_width = ai_width * multiplier
                scaled_height = ai_height * multiplier
                if (abs(width - scaled_width) <= tolerance and 
                    abs(height - scaled_height) <= tolerance):
                    return True, f"Scaled match ({multiplier}x) to AI size: {ai_width}x{ai_height}"

        return False, "No match to common AI generation sizes"

    def is_photo(self, image):
        """
        Check if the given image contains any EXIF data
        
        Args:
            image: already lodaded image
        Returns:
            bool: True if image contains EXIF data, False otherwise
        """
        try:
            # Get EXIF data
            exif_data = image._getexif()
            
            # If there's no EXIF data, check for general image info
            if exif_data is None:
                # Check if image has any metadata
                image_info = image.info
                return len(image_info) > 0
                
            return True
                
        except Exception as e:
            print(f"Error processing image: {str(e)}")
            return False
    

    def check_image(self, image_path) -> Tuple[bool, str]:
        """
        Check if the image might be AI generated by analyzing its metadata
        
        Args:
            image_path: Path to the image file
            
        Returns:
            Tuple[bool, str]: (is_likely_ai_generated, reason)
        """
        try:
            with Image.open(image_path) as img:
                # Check dimensions first
                width, height = img.size
                is_ai_size, size_reason = self.is_common_ai_size(width, height)
                
                # check metadata
                metadata = self.get_metadata(img)
                indicators = self._analyze_metadata(metadata)

                # Combine results
                reasons = []

                if is_ai_size:
                    reasons.append(size_reason)
                   
                if not metadata:
                    reasons.append("No metadata found - possible AI generation or stripped metadata")
                    
                if indicators:
                    reasons.append(f"Potential AI indicators found: {', '.join(indicators)}")
                
                # Determine if likely AI generated
                is_likely_ai = is_ai_size or bool(indicators) or not metadata
                
                if not reasons:
                    return False, "No clear AI generation indicators found"
                    
                return is_likely_ai, " | ".join(reasons)

                
        except Exception as e:
            return None, f"Error analyzing image: {str(e)}"

    def _analyze_metadata(self, metadata: dict) -> list:
        """
        Analyze metadata for AI generation indicators
        
        Returns:
            list: List of found indicators
        """
        indicators = []
        
        # Check software information
        software = metadata.get('Software', '')
        if isinstance(software, str):
            software = software.lower()
            if any(sig in software for sig in self.AI_GENERATOR_SIGNATURES):
                indicators.append(f"AI software detected: {software}")

        # Check for artist/author information
        artist = metadata.get('Artist', '')
        if isinstance(artist, str) and any(sig in artist.lower() for sig in self.AI_GENERATOR_SIGNATURES):
            indicators.append(f"AI-related artist field: {artist}")

        # Check for common AI model metadata
        for key, value in metadata.items():
            if isinstance(value, str):
                value_lower = value.lower()
                if any(sig in value_lower for sig in self.AI_GENERATOR_SIGNATURES):
                    indicators.append(f"AI indicator in {key}: {value}")

        # Check for suspicious characteristics
        if 'MakerNote' in metadata:
            maker_note = str(metadata['MakerNote']).lower()
            if any(sig in maker_note for sig in self.AI_GENERATOR_SIGNATURES):
                indicators.append("AI signature in MakerNote")

        # # Check for missing typical camera metadata
        # if not any(key in metadata for key in [
        #     'Make', 'Model', 'ExifImageWidth', 'ExifImageHeight', 
        #     'DateTimeOriginal', 'ExposureTime', 'FNumber'
        # ]):
        #     indicators.append("Missing typical camera metadata")

        return indicators

    def get_metadata(self, image) -> dict:
        """
        Extract all available metadata from the image
        
        Args:
            image: PIL Image object
            
        Returns:
            dict: Dictionary containing the metadata
        """
        metadata = {}
        
        try:
            # Get EXIF data
            exif_data = image._getexif()
            
            if exif_data:
                # Decode EXIF data
                for tag_id in exif_data:
                    tag = TAGS.get(tag_id, tag_id)
                    data = exif_data.get(tag_id)
                    metadata[tag] = data
            
            # Get general image info
            for key, value in image.info.items():
                if key not in metadata:
                    metadata[key] = value
                    
            # Add basic image properties
            metadata['format'] = image.format
            metadata['size'] = image.size
            metadata['mode'] = image.mode
                
        except Exception as e:
            print(f"Error extracting metadata: {str(e)}")
            
        return metadata

    # def get_metadata(self, image):
    #     """
    #     Extract all available metadata from the image
        
    #     Args:
    #         image: The image as PILImage
            
    #     Returns:
    #         dict: Dictionary containing the metadata
    #     """
    #     metadata = {}
        
    #     try:
    #         # Get EXIF data
    #         exif_data = image._getexif()
            
    #         if exif_data:
    #             # Decode EXIF data
    #             for tag_id in exif_data:
    #                 tag = TAGS.get(tag_id, tag_id)
    #                 data = exif_data.get(tag_id)
    #                 metadata[tag] = data
            
    #         # Get general image info
    #         for key, value in image.info.items():
    #             if key not in metadata:
    #                 metadata[key] = value
                    
    #         # Add basic image properties
    #         metadata['format'] = image.format
    #         metadata['size'] = image.size
    #         metadata['mode'] = image.mode
                
    #     except Exception as e:
    #         print(f"Error extracting metadata: {str(e)}")
            
    #     return metadata
