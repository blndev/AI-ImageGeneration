import unittest
from pathlib import Path
from PIL import Image
import os
from app.validators import ExifScanner

class TestExifScanner(unittest.TestCase):
    @classmethod
    def setUpClass(cls):
        """Set up test fixtures before running tests"""
        cls.scanner = ExifScanner()
        cls.test_dir = Path("test_images")
        cls.test_dir.mkdir(exist_ok=True)
        
        # Create test images
        cls._create_test_images()

    @classmethod
    def tearDownClass(cls):
        """Clean up test fixtures after running tests"""
        # Remove test images
        for file in cls.test_dir.glob("*"):
            file.unlink()
        cls.test_dir.rmdir()

    @classmethod
    def _create_test_images(cls):
        """Create test images with different metadata configurations"""
        # Create a simple RGB image
        img = Image.new('RGB', (100, 100), color='red')
        
        # Save image without any EXIF
        img.save(cls.test_dir / "no_exif.jpg")
        
        # Save image with basic EXIF
        img_with_exif = img.copy()
        exif_data = img_with_exif.getexif()
        exif_data[0x0110] = "Test Camera"  # Model
        exif_data[0x010F] = "Test Make"    # Make
        img_with_exif.save(cls.test_dir / "with_exif.jpg", exif=exif_data)
        
        # Save image with AI-related EXIF
        img_ai = img.copy()
        exif_ai = img_ai.getexif()
        exif_ai[0x0131] = "Stable Diffusion v1.5"  # Software
        img_ai.save(cls.test_dir / "ai_generated.jpg", exif=exif_ai)

    def test_is_photo_with_no_exif(self):
        """Test image with no EXIF data"""
        result, reason = self.scanner.check_image(self.test_dir / "no_exif.jpg")
        self.assertFalse(result)

    def test_is_photo_with_exif(self):
        """Test image with regular EXIF data"""
        result, reason = self.scanner.check_image(self.test_dir / "with_exif.jpg")
        self.assertFalse(result)
        self.assertIn("No clear AI generation indicators", reason)

    def test_is_photo_with_ai_metadata(self):
        """Test image with AI-related metadata"""
        result, reason = self.scanner.check_image(self.test_dir / "ai_generated.jpg")
        self.assertTrue(result)
        self.assertIn("AI indicators", reason)

    def test_nonexistent_file(self):
        """Test behavior with non-existent file"""
        result, reason = self.scanner.check_image(self.test_dir / "nonexistent.jpg")
        self.assertIsNone(result)
        self.assertIn("Error", reason)

    def test_get_metadata_valid_image(self):
        """Test metadata extraction from valid image"""
        with Image.open(self.test_dir / "with_exif.jpg") as img:
            metadata = self.scanner.get_metadata(img)
            self.assertIsInstance(metadata, dict)
            self.assertIn('Make', metadata)
            self.assertEqual(metadata['Make'], "Test Make")

    @unittest.skip("Skipping test for now as it's not implemented")
    def test_analyze_metadata_empty(self):
        """Test metadata analysis with empty metadata"""
        indicators = self.scanner._analyze_metadata({})
        
        self.assertIn("Missing typical camera metadata", indicators)

    def test_analyze_metadata_ai_software(self):
        """Test metadata analysis with AI software indicators"""
        metadata = {'Software': 'Stable Diffusion v1.5'}
        indicators = self.scanner._analyze_metadata(metadata)
        self.assertTrue(any('AI software detected' in ind for ind in indicators))

    def test_analyze_metadata_normal_camera(self):
        """Test metadata analysis with normal camera metadata"""
        metadata = {
            'Make': 'Canon',
            'Model': 'EOS 5D',
            'ExifImageWidth': 6000,
            'ExifImageHeight': 4000,
            'DateTimeOriginal': '2023:01:01 12:00:00',
            'ExposureTime': '1/100',
            'FNumber': '2.8'
        }
        indicators = self.scanner._analyze_metadata(metadata)
        self.assertEqual(len(indicators), 0)

    def test_invalid_image_format(self):
        """Test behavior with invalid image format"""
        # Create an invalid image file
        invalid_path = self.test_dir / "invalid.jpg"
        with open(invalid_path, 'w') as f:
            f.write("Not an image")
        
        result, reason = self.scanner.check_image(invalid_path)
        self.assertIsNone(result)
        self.assertIn("Error", reason)

    @unittest.skip("Skipping test for now as it's not implemented")
    def test_ai_signatures_detection(self):
        """Test detection of various AI signatures"""
        test_cases = [
            {'Software': 'DALL-E 2'},
            {'Artist': 'Generated by Midjourney'},
            {'Comment': 'Created using Stable Diffusion'},
            {'MakerNote': 'DeepAI Generated'}
        ]
        
        for metadata in test_cases:
            indicators = self.scanner._analyze_metadata(metadata)
            self.assertTrue(len(indicators) > 0, 
                          f"Failed to detect AI signature in {metadata}")

if __name__ == '__main__':
    unittest.main()
